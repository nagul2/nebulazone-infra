input {
  beats {
    port => 5044
  }
}

filter {
  if "error" in [message] {
    mutate {
      add_tag => ["is_error"]
    }

    aggregate {
      task_id => "%{host.name}"
      code => "
        map['error_count'] ||= 0
        map['error_count'] += 1
        map['last_error_message'] = event.get('message')
      "
      map_action => "create_or_update"
      push_map_as_event_on_timeout => true
      timeout => 600
      timeout_task_id_field => "host.name"
      timeout_tags => ["_error_aggregation_timeout"]
    }
  }
  # ===============================
  # 1. 로그 타입별 파싱
  # ===============================

  if [log_type] == "admin" {
    grok {
      match => {
        "message" => "%{TIME:time} %{LOGLEVEL:loglevel}\s+%{JAVACLASS:logger} - \[ADMIN API 요청\] %{WORD:method} %{URIPATHPARAM:uri} \| Controller=%{JAVACLASS:controller}\.%{WORD:controllerMethod} \| 유저=id=%{NUMBER:userId:int}, email=%{EMAILADDRESS:userEmail}"
      }
      tag_on_failure => ["_grokparsefailure_admin"]
    }
    date {
      match => ["time", "HH:mm:ss.SSS"]
      target => "@timestamp"
    }
    mutate {
      add_field => { "severity" => "admin" }
    }

  } else if [log_type] == "error" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:msg}"
      }
      tag_on_failure => ["_grokparsefailure_error"]
    }
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    mutate {
      add_field => { "severity" => "error" }
    }

  } else if [log_type] == "app" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:msg}"
      }
      tag_on_failure => ["_grokparsefailure_app"]
    }
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    mutate {
      add_field => { "severity" => "info" }
    }
  }

  # ===============================
  # 2. 공격 탐지 (SQLi, XSS, Path Traversal)
  # ===============================

  # SQL Injection
  if [msg] and [msg] =~ /(?i)((\b(select|union|drop|insert|update|delete)\b)|(\bor\s+\d+\s*=\s*\d+\b)|(sleep\s*\(|benchmark\s*\()|(-{2,})|(\bxp_cmdshell\b)|(\bchar\s*\()|(\bconcat\s*\())/ {
    mutate {
      add_field => {
        "attack_type" => "SQL_INJECTION"
        "reason" => "Suspicious SQL keyword in log"
        "ip" => "%{[host][ip]}"
      }
    }

  # XSS
  } else if [msg] and [msg] =~ /(?i)(<script\b[^>]*>(.*?)<\/script>|onerror=|onload=|javascript:|document\.cookie|<img\b[^>]*>|<iframe\b[^>]*>|<svg\b[^>]*>)/ {
    mutate {
      add_field => {
        "attack_type" => "XSS"
        "reason" => "Suspicious XSS pattern in log"
        "ip" => "%{[host][ip]}"
      }
    }

  # Path Traversal
  } else if [msg] and [msg] =~ /(\.\.\/|\.\.\\)/ {
    mutate {
      add_field => {
        "attack_type" => "PATH_TRAVERSAL"
        "reason" => "Detected ../ or ..\\ traversal attempt"
        "ip" => "%{[host][ip]}"
      }
    }
  }

  # ===============================
  # 3. 공격 발생 시 공통 후처리
  # ===============================

  if [attack_type] {
    # 만료 시각 설정 (24시간)
    ruby {
      code => "
        require 'time'
        expires_at = (Time.now + 86400).strftime('%Y-%m-%d %H:%M:%S')
        event.set('expires_at', expires_at)
      "
    }

    # GeoIP 설정
    geoip {
      source => "ip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
    }
  }

  # ===============================
  # 4. 불필요한 필드 정리
  # ===============================
  mutate {
    remove_field => ["host", "agent", "input", "ecs", "log", "event"]
  }
}

output {

    if "_error_aggregation_timeout" in [tags] and [error_count] >= 10 {
        http {
          url => "http://nebulazone-alertmanager:9093/api/v2/alerts"
          http_method => "post"
          format => "json"
          headers => { "Content-Type" => "application/json" }
          message => '
            [
              {
                "labels": {
                  "alertname": "ApplicationErrorRate",
                  "severity": "critical",
                  "instance": "%{[host][name]}",
                  "job": "application-logs"
                },
                "annotations": {
                  "summary": "High error rate detected in application logs",
                  "description": "More than 10 errors occurred in the last 10 minutes. Count: %{error_count}. Last error: %{last_error_message}"
                },
                "startsAt": "%{@timestamp}"
              }
            ]
          '
        }
      }
  # ===============================
  # 1. 공격 탐지 시 API 호출 + 별도 저장
  # ===============================

  if [attack_type] {
    # 내부망은 제외
    if [ip] =~ /^192\.168\./ or [ip] =~ /^10\./ or [ip] == "127.0.0.1" {
      # do nothing
    } else {
      # 내부 Ban API 호출
      http {
        url => "http://localhost:8080/internal/bans"
        http_method => "post"
        format => "json"
        content_type => "application/json"
        headers => ["X-LOGSTASH-KEY", "my_super_secret_logstash_key_20240625"]
        mapping => {
          "ipAddress"   => "%{ip}"
          "attackType"  => "%{attack_type}"
          "reason"      => "%{reason}"
          "expiresAt"   => "%{expires_at}"
        }
      }

      # 공격 로그는 별도 인덱스로 저장
      elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "beats-attack-%{+YYYY.MM.dd}"
      }
    }
  }

  # ===============================
  # 2. 일반 로그 저장
  # ===============================

  if [log_type] == "admin" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "beats-admin-%{+YYYY.MM.dd}"
    }
  } else if [log_type] == "error" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "beats-error-%{+YYYY.MM.dd}"
    }
  } else if [log_type] == "app" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "beats-app-%{+YYYY.MM.dd}"
    }
  }

  # ===============================
  # 3. 디버깅 콘솔 출력
  # ===============================
  stdout {
    codec => rubydebug
  }
}
